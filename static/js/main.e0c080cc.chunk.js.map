{"version":3,"sources":["Board.jsx","Game.jsx","index.js"],"names":["Square","props","value","isHighlight","onClick","type","className","Board","i","this","squares","lastMove","lineWinner","key","indexOf","rows","items","j","push","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","winner","line","History","history","slice","isAsc","onChangeOrder","onJumpTo","reverse","moves","map","step","index","description","noMove","rowColor","stepNumber","htmlFor","id","onChange","initialState","Array","fill","xIsNext","Game","state","setState","concat","prevState","status","current","finished","calculateBoardFill","reset","resetState","handleClick","jumpTo","handleChange","ReactDOM","render","href","width","alt","src","document","getElementById"],"mappings":"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","file":"static/js/main.e0c080cc.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\n\nfunction Square(props) {\n  const { value, isHighlight, onClick } = props;\n  return (\n    <button\n      type=\"button\"\n      className={isHighlight ? 'square teal lighten-2' : 'square white'}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const {\n      squares, onClick, lastMove, lineWinner,\n    } = this.props;\n    return (\n      <Square\n        key={i}\n        value={squares[i]}\n        onClick={() => onClick(i)}\n        isHighlight={lastMove === i || lineWinner.indexOf(i) !== -1}\n      />\n    );\n  }\n\n  render() {\n    const rows = [];\n    for (let i = 0; i < 3; i += 1) {\n      const items = [];\n      for (let j = i * 3; j < (i + 1) * 3; j += 1) {\n        items.push(this.renderSquare(j));\n      }\n      rows.push(\n        <div className=\"board-row\" key={i}>\n          {items}\n        </div>,\n      );\n    }\n\n    return (\n      <div>\n        {rows}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport './index.css';\nimport Board from './Board';\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n      };\n    }\n  }\n  return {\n    winner: null,\n    line: [],\n  };\n}\n\nfunction calculateBoardFill(squares) {\n  for (let i = 0; i < 9; i += 1) {\n    if (squares[i] === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction History(props) {\n  // eslint-disable-next-line react/destructuring-assignment\n  let history = props.history.slice();\n  const { isAsc, onChangeOrder, onJumpTo } = props;\n  if (!isAsc) {\n    history = history.reverse();\n  }\n  const moves = history.map((step, index) => {\n    const description = step.lastMove !== null ? 'Go to' : 'Go to Game Start';\n    /* Identify the movement number, according to the order (ASC/DESC) */\n    const noMove = props.isAsc ? index : (history.length - 1) - index;\n    const rowColor = props.stepNumber === noMove ? 'teal lighten-5' : 'white';\n    return (\n      <div\n        key={index}\n        className={`collection-item row ${rowColor}`}\n      >\n        <div className=\"col s6 m6 l6 xl6\">\n          <h6>{`Move # ${noMove}`}</h6>\n        </div>\n        <div className=\"col s6 m6 l6 xl6\">\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn\"\n            onClick={() => onJumpTo(index)}\n          >\n            {description}\n          </button>\n        </div>\n      </div>\n    );\n  });\n  return (\n    <div className=\"col s12 m12 l4 xl4\">\n      <div className=\"collection\">\n        <div className=\"collection-item center\">\n          <h4>History</h4>\n          {/* Switch for order move's list */}\n          <div className=\"switch\">\n            <label htmlFor=\"switch\">\n              Asc\n              <input id=\"switch\" type=\"checkbox\" onChange={() => onChangeOrder()} />\n              <span className=\"lever\" />\n              Desc\n            </label>\n          </div>\n        </div>\n        {moves}\n      </div>\n    </div>\n  );\n}\n\n\nconst initialState = {\n  history: [{\n    squares: Array(9).fill(null),\n    lastMove: null,\n  }],\n  xIsNext: true,\n  stepNumber: 0,\n  isAsc: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  resetState() {\n    this.setState(initialState);\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleClick(i) {\n    const { xIsNext, stepNumber } = this.state;\n    let { history } = this.state;\n    history = history.slice(0, stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares,\n        lastMove: i,\n      }]),\n      xIsNext: !xIsNext,\n      stepNumber: history.length,\n    });\n  }\n\n  handleChange() {\n    this.setState((prevState) => ({ isAsc: !prevState.isAsc }));\n  }\n\n  render() {\n    const {\n      history, stepNumber, isAsc, xIsNext,\n    } = this.state;\n    const current = history[stepNumber];\n    const { winner, line } = calculateWinner(current.squares);\n    let status;\n    let finished = false;\n    if (winner) {\n      status = `Winner: ${winner}`;\n      finished = true;\n    } else if (calculateBoardFill(current.squares)) {\n      status = \"It's a tied game\";\n      finished = true;\n    } else {\n      status = `Next player: ${(xIsNext ? 'X' : 'O')}`;\n    }\n    let reset = null;\n    if (finished) {\n      reset = (\n        <button\n          type=\"button\"\n          className=\"waves-effect waves-light btn\"\n          onClick={() => this.resetState()}\n        >\n          Reset Game\n        </button>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col l12 xl12\">\n            <h1>{status}</h1>\n            {reset}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col l6 xl6\">\n            <div className=\"game-board\">\n              <Board\n                squares={current.squares}\n                lastMove={current.lastMove}\n                lineWinner={line}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n          </div>\n          <History\n            history={history}\n            isAsc={isAsc}\n            stepNumber={this.stepNumber}\n            onJumpTo={(step) => this.jumpTo(step)}\n            onChangeOrder={() => this.handleChange()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nfunction App() {\n  const logo = 'https://s3.amazonaws.com/files.thegamecrafter.com/3457b02337c15a1faea108fc599273ebb3d47f67';\n  return (\n    <div>\n      <nav>\n        <div className=\"nav-wrapper teal lighten-1\">\n          <a href=\"sass.html\" className=\"brand-logo\">\n            <img width=\"150\" alt=\"imagen del logo del juego\" src={logo} />\n          </a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li><a href=\"sass.html\">About</a></li>\n          </ul>\n        </div>\n      </nav>\n      <Game />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}